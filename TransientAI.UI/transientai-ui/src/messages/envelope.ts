// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "envelope.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MarketDataResponse } from "./market_data";
import { MarketDataRequest } from "./market_data";
/**
 * @generated from protobuf message Envelope
 */
export interface Envelope {
    /**
     * @generated from protobuf field: string topic = 1;
     */
    topic: string;
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "marketDataRequest";
        /**
         * @generated from protobuf field: MarketDataRequest marketDataRequest = 2;
         */
        marketDataRequest: MarketDataRequest;
    } | {
        oneofKind: "marketDataResponse";
        /**
         * @generated from protobuf field: MarketDataResponse marketDataResponse = 3;
         */
        marketDataResponse: MarketDataResponse;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Envelope$Type extends MessageType<Envelope> {
    constructor() {
        super("Envelope", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "marketDataRequest", kind: "message", oneof: "content", T: () => MarketDataRequest },
            { no: 3, name: "marketDataResponse", kind: "message", oneof: "content", T: () => MarketDataResponse }
        ]);
    }
    create(value?: PartialMessage<Envelope>): Envelope {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        message.content = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Envelope>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Envelope): Envelope {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                case /* MarketDataRequest marketDataRequest */ 2:
                    message.content = {
                        oneofKind: "marketDataRequest",
                        marketDataRequest: MarketDataRequest.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).marketDataRequest)
                    };
                    break;
                case /* MarketDataResponse marketDataResponse */ 3:
                    message.content = {
                        oneofKind: "marketDataResponse",
                        marketDataResponse: MarketDataResponse.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).marketDataResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Envelope, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        /* MarketDataRequest marketDataRequest = 2; */
        if (message.content.oneofKind === "marketDataRequest")
            MarketDataRequest.internalBinaryWrite(message.content.marketDataRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MarketDataResponse marketDataResponse = 3; */
        if (message.content.oneofKind === "marketDataResponse")
            MarketDataResponse.internalBinaryWrite(message.content.marketDataResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Envelope
 */
export const Envelope = new Envelope$Type();
