// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "market_data.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * Represents a single OHLC data point for a specific date/time
 *
 * @generated from protobuf message OHLCDataPoint
 */
export interface OHLCDataPoint {
    /**
     * @generated from protobuf field: string date = 1;
     */
    date: string; // Date string (e.g., "YYYY-MM-DD" or "YYYY-MM-DD HH:MM:SS")
    /**
     * @generated from protobuf field: optional double open = 2;
     */
    open?: number; // Use optional for fields that might be null/missing
    /**
     * @generated from protobuf field: optional double high = 3;
     */
    high?: number;
    /**
     * @generated from protobuf field: optional double low = 4;
     */
    low?: number;
    /**
     * @generated from protobuf field: optional double close = 5;
     */
    close?: number;
}
/**
 * Represents the complete market data response for a ticker
 *
 * @generated from protobuf message MarketDataResponse
 */
export interface MarketDataResponse {
    /**
     * @generated from protobuf field: string ticker = 1;
     */
    ticker: string;
    /**
     * @generated from protobuf field: optional string company_name = 2;
     */
    companyName?: string;
    /**
     * @generated from protobuf field: string period = 3;
     */
    period: string;
    /**
     * @generated from protobuf field: repeated OHLCDataPoint data = 4;
     */
    data: OHLCDataPoint[]; // List of OHLC data points
    /**
     * @generated from protobuf field: optional string error = 5;
     */
    error?: string; // Send error messages if any
    /**
     * @generated from protobuf field: optional double current_price = 6;
     */
    currentPrice?: number;
    /**
     * @generated from protobuf field: optional double change = 7;
     */
    change?: number;
    /**
     * @generated from protobuf field: optional double percent_change = 8;
     */
    percentChange?: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 9;
     */
    timestamp?: Timestamp; // Time the response was generated/data fetched
}
/**
 * @generated from protobuf message MarketDataRequest
 */
export interface MarketDataRequest {
    /**
     * @generated from protobuf field: string identifier = 1;
     */
    identifier: string;
    /**
     * @generated from protobuf field: MarketDataType type = 2;
     */
    type: MarketDataType;
    /**
     * @generated from protobuf field: PeriodType period = 3;
     */
    period: PeriodType;
    /**
     * @generated from protobuf field: bool intraday = 4;
     */
    intraday: boolean;
    /**
     * @generated from protobuf field: optional MarketDataInterval interval = 5;
     */
    interval?: MarketDataInterval;
}
/**
 * @generated from protobuf enum PeriodType
 */
export enum PeriodType {
    /**
     * @generated from protobuf enum value: ONE_DAY = 0;
     */
    ONE_DAY = 0,
    /**
     * @generated from protobuf enum value: THREE_DAY = 1;
     */
    THREE_DAY = 1,
    /**
     * @generated from protobuf enum value: ONE_WEEK = 2;
     */
    ONE_WEEK = 2,
    /**
     * @generated from protobuf enum value: ONE_MONTH = 3;
     */
    ONE_MONTH = 3,
    /**
     * @generated from protobuf enum value: THREE_MONTH = 4;
     */
    THREE_MONTH = 4,
    /**
     * @generated from protobuf enum value: SIX_MONTH = 5;
     */
    SIX_MONTH = 5,
    /**
     * @generated from protobuf enum value: ONE_YEAR = 6;
     */
    ONE_YEAR = 6,
    /**
     * @generated from protobuf enum value: YEAR_TO_DATE = 7;
     */
    YEAR_TO_DATE = 7,
    /**
     * @generated from protobuf enum value: MAX = 8;
     */
    MAX = 8
}
/**
 * @generated from protobuf enum MarketDataType
 */
export enum MarketDataType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: EQUITY = 1;
     */
    EQUITY = 1,
    /**
     * @generated from protobuf enum value: FUTURES = 2;
     */
    FUTURES = 2,
    /**
     * @generated from protobuf enum value: CRYPTOCURRENCY = 3;
     */
    CRYPTOCURRENCY = 3,
    /**
     * @generated from protobuf enum value: FX = 4;
     */
    FX = 4,
    /**
     * @generated from protobuf enum value: DOMESTIC_TREASURY = 5;
     */
    DOMESTIC_TREASURY = 5,
    /**
     * @generated from protobuf enum value: FOREIGN_TREASURY = 6;
     */
    FOREIGN_TREASURY = 6
}
/**
 * @generated from protobuf enum MarketDataInterval
 */
export enum MarketDataInterval {
    /**
     * @generated from protobuf enum value: ONE_MIN = 0;
     */
    ONE_MIN = 0,
    /**
     * @generated from protobuf enum value: FIVE_MIN = 1;
     */
    FIVE_MIN = 1,
    /**
     * @generated from protobuf enum value: FIFTEEN_MIN = 3;
     */
    FIFTEEN_MIN = 3,
    /**
     * @generated from protobuf enum value: THIRTY_MIN = 4;
     */
    THIRTY_MIN = 4,
    /**
     * @generated from protobuf enum value: ONE_HOUR = 5;
     */
    ONE_HOUR = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class OHLCDataPoint$Type extends MessageType<OHLCDataPoint> {
    constructor() {
        super("OHLCDataPoint", [
            { no: 1, name: "date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "open", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "high", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "low", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "close", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<OHLCDataPoint>): OHLCDataPoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.date = "";
        if (value !== undefined)
            reflectionMergePartial<OHLCDataPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OHLCDataPoint): OHLCDataPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string date */ 1:
                    message.date = reader.string();
                    break;
                case /* optional double open */ 2:
                    message.open = reader.double();
                    break;
                case /* optional double high */ 3:
                    message.high = reader.double();
                    break;
                case /* optional double low */ 4:
                    message.low = reader.double();
                    break;
                case /* optional double close */ 5:
                    message.close = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OHLCDataPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string date = 1; */
        if (message.date !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.date);
        /* optional double open = 2; */
        if (message.open !== undefined)
            writer.tag(2, WireType.Bit64).double(message.open);
        /* optional double high = 3; */
        if (message.high !== undefined)
            writer.tag(3, WireType.Bit64).double(message.high);
        /* optional double low = 4; */
        if (message.low !== undefined)
            writer.tag(4, WireType.Bit64).double(message.low);
        /* optional double close = 5; */
        if (message.close !== undefined)
            writer.tag(5, WireType.Bit64).double(message.close);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OHLCDataPoint
 */
export const OHLCDataPoint = new OHLCDataPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarketDataResponse$Type extends MessageType<MarketDataResponse> {
    constructor() {
        super("MarketDataResponse", [
            { no: 1, name: "ticker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "company_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "period", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OHLCDataPoint },
            { no: 5, name: "error", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "current_price", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "change", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "percent_change", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<MarketDataResponse>): MarketDataResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ticker = "";
        message.period = "";
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<MarketDataResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarketDataResponse): MarketDataResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ticker */ 1:
                    message.ticker = reader.string();
                    break;
                case /* optional string company_name */ 2:
                    message.companyName = reader.string();
                    break;
                case /* string period */ 3:
                    message.period = reader.string();
                    break;
                case /* repeated OHLCDataPoint data */ 4:
                    message.data.push(OHLCDataPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string error */ 5:
                    message.error = reader.string();
                    break;
                case /* optional double current_price */ 6:
                    message.currentPrice = reader.double();
                    break;
                case /* optional double change */ 7:
                    message.change = reader.double();
                    break;
                case /* optional double percent_change */ 8:
                    message.percentChange = reader.double();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 9:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarketDataResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ticker = 1; */
        if (message.ticker !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ticker);
        /* optional string company_name = 2; */
        if (message.companyName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* string period = 3; */
        if (message.period !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.period);
        /* repeated OHLCDataPoint data = 4; */
        for (let i = 0; i < message.data.length; i++)
            OHLCDataPoint.internalBinaryWrite(message.data[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional string error = 5; */
        if (message.error !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.error);
        /* optional double current_price = 6; */
        if (message.currentPrice !== undefined)
            writer.tag(6, WireType.Bit64).double(message.currentPrice);
        /* optional double change = 7; */
        if (message.change !== undefined)
            writer.tag(7, WireType.Bit64).double(message.change);
        /* optional double percent_change = 8; */
        if (message.percentChange !== undefined)
            writer.tag(8, WireType.Bit64).double(message.percentChange);
        /* google.protobuf.Timestamp timestamp = 9; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarketDataResponse
 */
export const MarketDataResponse = new MarketDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarketDataRequest$Type extends MessageType<MarketDataRequest> {
    constructor() {
        super("MarketDataRequest", [
            { no: 1, name: "identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["MarketDataType", MarketDataType] },
            { no: 3, name: "period", kind: "enum", T: () => ["PeriodType", PeriodType] },
            { no: 4, name: "intraday", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "interval", kind: "enum", opt: true, T: () => ["MarketDataInterval", MarketDataInterval] }
        ]);
    }
    create(value?: PartialMessage<MarketDataRequest>): MarketDataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identifier = "";
        message.type = 0;
        message.period = 0;
        message.intraday = false;
        if (value !== undefined)
            reflectionMergePartial<MarketDataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarketDataRequest): MarketDataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string identifier */ 1:
                    message.identifier = reader.string();
                    break;
                case /* MarketDataType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* PeriodType period */ 3:
                    message.period = reader.int32();
                    break;
                case /* bool intraday */ 4:
                    message.intraday = reader.bool();
                    break;
                case /* optional MarketDataInterval interval */ 5:
                    message.interval = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarketDataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string identifier = 1; */
        if (message.identifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier);
        /* MarketDataType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* PeriodType period = 3; */
        if (message.period !== 0)
            writer.tag(3, WireType.Varint).int32(message.period);
        /* bool intraday = 4; */
        if (message.intraday !== false)
            writer.tag(4, WireType.Varint).bool(message.intraday);
        /* optional MarketDataInterval interval = 5; */
        if (message.interval !== undefined)
            writer.tag(5, WireType.Varint).int32(message.interval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarketDataRequest
 */
export const MarketDataRequest = new MarketDataRequest$Type();
